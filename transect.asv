function transect(filename,runi)

%transect.  A dynamic model for the moprhological evolution of a
%backbarrier basin with marshes, mudflats, and an upland slope, and their 
%requisite carbon pools. This function should be run through the command
%window or through an .m file.

close all;clc;clear global

%make variables global
%see readme for list of all variables used
global C_e_ODE
global Fc_ODE
global tr
global numiterations
global P
global dt
global ws
global timestep
global filename
global endyear

global Dmin
global Dmax
global BMax
global amp
global wind
global bfo
global B

global elevation
global fetch
global Marsh_edge
global mineral_dep
global OCb
global SLR
global msl
global yr
global organic_dep_autoch
global organic_dep_alloch
global mui
global mki
global rhoo
global rhos
global forestOM


Inputdata=xlsread(['Run Files\' filename '\Input variables.xlsx']); % Read in input file, which is an excel file located in the "Run Files" folder within the larger folder containing the model


%Read in the input files info from excel sheet and rename the variable to
%desired names
%Case 1: Running only 1 model run
if nargin == 1
    RSLRi=Inputdata(1,1); %relative sea level rise rate
    Coi=Inputdata(1,2); %external sediment supply
    slope=Inputdata(1,3); %Upland slope
    dur=Inputdata(1,4); %[yr] Number of years to simulate
%Case 2: Running a batch of model runs
else
    RSLRi=Inputdata(runi,1);%relative sea level rise rate
    Coi=Inputdata(runi,2); %external sediment supply
    slope=Inputdata(runi,3); %Upland slope
    dur=Inputdata(runi,4); %[yr] Number of years to simulate
end

%Convert variables to more useable units
RSLR=RSLRi*(10^-3)./(3600*24*365); %relative sea level rise rate [m/s], converts to SLR rate in m/s
SLR = RSLR*(3600*24*365); %Sea level rise for a given yr [m/yr], converts to SLR per year
Co=Coi/1000; % ref conc. [kg/m3] convert reference concentration to kg/m3 (from mg/L in input sheet)


load('Spin Up_mkihi/MarshStrat_all_RSLR1_CO50.mat') %Load in spin up file, created with function "spinup" -- see instructions there and in the readme

startyear=min(size((elev_25)))+1; %Set start year of simulation to be after the spinup - made to be flexible for different spinup lengths. 
endyear = dur + startyear; %Last year to simulate --  add spinup to the duration listed in input sheet

%Name of the folder where outputs/plots will be saved, including input
%variables into the file name
if slope < .001
    outputfilename = ['Run Files/' filename '/Outputs_RSLR' num2str(RSLRi) '_CO' num2str(Coi) '_Slope000' num2str(1000*slope) '/'];
elseif slope < .01
    outputfilename = ['Run Files/' filename '/Outputs_RSLR' num2str(RSLRi) '_CO' num2str(Coi) '_Slope00' num2str(1000*slope) '/'];
elseif slope < .1
    outputfilename = ['Run Files/' filename '/Outputs_RSLR' num2str(RSLRi) '_CO' num2str(Coi) '_Slope0' num2str(1000*slope) '/'];
else
    outputfilename = ['Run Files/' filename '/Outputs_RSLR' num2str(RSLRi) '_CO' num2str(Coi) '_Slope' num2str(1000*slope) '/'];
end
if exist(outputfilename,'file') ~= 7
    mkdir(outputfilename) %If filename does not exist, create a folder to save the output variable to
end


OPT=odeset('AbsTol',10^-6,'RelTol',10^-6,'Events',@POOLstopp5); % Set tolerances for ODE solver
OPTfzero=optimset('Algorithm','Levenberg-Marquardt','TolFun',10^-28,'TolX',10^-28,'MaxFunEvals',10000); % Set tolerances for ODE solver

% Hard-coded Parameters
rhos=2000;%bulk density of mineral matter [kg/m3]
rhob=rhos;%bulk density of the bay, which is initially all minerl [kg/m3]
rhoo=85.0;%bulk density of organic matter [kg/m3]
P=12.5*3600*1; % tidal period [s]
ws=0.05*10^-3;%effective settling velocity [m/s]; Marani 2010 uses 0.2 mm s-1, Mudd 2009 uses .037 mm/sws2=0.5*10^-3;
wsf=0.5*10^-3; %settlign velocity on the mud flat[m/s]
tcr=0.1; %Critical shear stress of the mudflat [Pa]
wind=6; %reference wind speed [m/s]
amp=1.4/2; % tidal amplitude [m]
Ba=2; %marsh progradation coeff [dinmensionless] (Mariotti and Carr, 2014) 
Be=0.16/(365*24*3600); %marsh erosion coeff [m/yr/ (W/m)] (Mariotti and Carr, 2014) K - are the units right on this one? - I think it should be m/s/(W/m), which is how it is in the other model
lamda=0.0001; % mudflat erodability coeff [dimensionless] (Mariotti and Carr, 2014)
dist=10; %reference dist from marsh bank [m]. (Mariotti and Carr, 2014)
bfo=5000; %initial bay fetch -- If this is changed, dfo and dmo should be recalibrated
tr=amp*2; %[m] tidal range
timestep=365*(24/12.5); %[tidal cycles per year] number to multiply accretion simulated over a tidal cycle by
msl(startyear+1:endyear)=(1:endyear-startyear)*SLR; %[m] mean sea level, calcs MSL over time given the SLR rate

%Minimum and maximum depth below high water that marsh vegetation can grow
%(Morris et al. 2002)
BMax=2500;% g/m2, maximum biomass at optimal elevation
Dmin=0; %[m], minimum depth below high water that marsh vegetation can grow
Dmax=.7167*2*amp-.483; %[m], maximum depth below high water that marsh vegetation can grow
%Decomposition parameters
mui = 0.4; %[m] Depth below which decomposition goes to zero in the marsh
mki = 0.1; %Coefficient of decomposition in the marsh

%Variables for forest aboveground growth and soil carbon
BMax_forest=5000;% g/m2, maximum biomass at optimal elevation
a=4; %xx
b=2; %Tree growth rate [1/m]
f0=0.0001; %Background carbon accumulation in forest soils [g/m2]
fwet=5; %Carbon layer from wetted soils [g/m2]
fgrow=2; %Decay constant for soil carbon [1/m]

%Set up domain and time vectors
years=1;TN=1*years+1;to=linspace(1,3600*24*365*years,TN);%initiate time, craete vector for time
x_m = ceil(bfo)+1; %Marsh edge (first marsh cell)
Marsh_edge = zeros(endyear,1); %create vector to track marsh edge
Marsh_edge(1:startyear-1)=x_m; %create vector to track marsh edge
Forest_edge=zeros(endyear,1); %create vector to track forest edge

% Calculate inundation time and mineral sedimentation in a single tidal cycle
numiterations=500; %xx
dt=P/numiterations; %xx

OCb=zeros(1,endyear); %Organic content of the uppermost layer of bay sediment, which determines the OC of suspended material deposited onto the marsh. Initially set to zero.
OCb(1:552)=.05; %Change organic content of the bay bottom (for the length of the spinup) to be 5%
edge_flood = zeros(1,endyear);%create vector to track marsh drowning
Fm_min = 0; %set the flux of mineral material to the marsh from the bay (initialize)
Fm_org = 0;%set the flux of organic material to the marsh from the bay (initialize)
Fm_flood = 0; %xx
Fp_sum = 0; %The amount of sediment taken from ponds to recharge sedimentation to drowning interior marsh
fetch = zeros(1,endyear); %create vector to track fetch throughout simulation
fetch(1:startyear-1) = bfo; %set fetch to initial value for duration of the spinup
mwo=1000; %Initial marsh width [m]

marshOM_initial=(sum(sum(orgAL_25))+sum(sum(orgAT_25)))/1000; %[kg] Total mass of organic matter in the marsh at the beginning of the simulation, both autoch and alloch
marshMM_initial=sum(sum(min_25))/1000; %[kg] Total mass of mineral matter in the marsh at the beginning of the simulation
marshLOI_initial=marshOM_initial/(marshOM_initial+marshMM_initial)*100; %[%] loi of the initial marsh deposit
marshOCP_initial=.4.*marshLOI_initial+.0025.*marshLOI_initial.^2; %Organic carbon content (%) from Craft et al (1991)
marshOC_initial=marshOCP_initial./100.*(marshOM_initial+marshMM_initial); %[kg] Organic Carbon deposited in the marsh 
%Save the marsh OM and OC values as output from the simulation for later
%use in analysis
save([filename 'marshLOI_initial.mat'],'marshLOI_initial')
save([filename 'marshOM_initial.mat'],'marshOM_initial')
save([filename 'marshOC_initial.mat'],'marshOC_initial')

%Populate the spinup years with underlying stratigraphy. To
%change initial marsh morphology or stratigraphy, it must be done in the
%"Spin Up" file.
[B,db,elevation] = buildtransect(RSLRi,Coi,slope,mwo,elev_25); %Build initial transect, see buildtransect function for more detail
Forest_edge(startyear-1)=find(elevation(startyear-1,:)<(msl(startyear-1)+amp-Dmin),1,'last')+1; % Calcuate where elevation is right for the forest to start

%Set up vectors for deposition
organic_dep_alloch=zeros(endyear,B);
organic_dep_autoch=zeros(endyear,B);
mineral_dep=zeros(endyear,B);

organic_dep_alloch(1:startyear-1,x_m:x_m+mwo-1)=orgAL_25; %Input spinup values into the organic allochthonous deposition matrix
organic_dep_autoch(1:startyear-1,x_m:x_m+mwo-1)=orgAT_25; %Input spinup values into the organic autochthonous deposition matrix
mineral_dep(1:startyear-1,x_m:x_m+mwo-1)=min_25; %Input spinup values into the mineral deposition matrix


Bay_depth(1:startyear) = db; %Use bay depth calcualted in buildtransect as the bay depth for the spinup period
dmo = elevation(startyear-1,x_m); %Set marsh edged depth to the elevation of the marsh edge at end of spinup
mortality = zeros(endyear,B); %Create vector for plant mortality
BayExport = zeros(endyear,2); %Create vector for bay export
BayOM = zeros(endyear,1); %Create vector for OM in the bay
BayMM = zeros(endyear,1);%Create vector for minearal matter in the bay
fluxes = zeros(8,endyear); %Create matrix to store fluxes

bgb_sum=zeros(endyear,1); %[g] set up vector for Sum of organic matter deposited across the marsh platform in a given year
Fd=zeros(endyear,1); %[kg] set up vector for Flux of organic matter out of the marsh due to decomposition
avg_accretion=zeros(endyear,1); %[m/yr] set up vector for Annual acretion rate averaged across the marsh platform

%Load in lookup table with mineral deposition in the forest
load(['Forest Organic Profile/forestMIN.mat'])

forestMIN; %[g] Table with forest mineral matter profile stored for in 25 depth increments of 2.5cm (rows) for forests of different ages (columns) from 1 to 80 years
startforestage=60; %[yr] age of the forest at the start of the simulation
forestage=startforestage; %set forest age to the forest age specified for the beginning of the simulation

%start a time loop, where you run funBAY every ts to determine
%change in bay depth and width, then run the evolvemarsh to determine marsh
%elevation change, then go to next time step and iterate with updated values.
for yr = startyear:endyear
    
    yr % print out year of iteration to see progress while running
    
    %Calculate the density of the marsh edge cell
    boundyr=find(elevation(:,x_m)>elevation(yr-1,1),1); %Find first year where the elevation of the marsh is above the depth of erosion (i.e. bay bottom)
    if boundyr == 1 %If you do erode the bay bottom...
        us=elevation(1,x_m)-elevation(yr-1,1); %[m] Depth of underlying stratigraphy
        usmass=us*rhos; %[kg] Mass of pure mineral sediment underlying marsh at marsh edge
    else
        usmass=0; %No unerlying material is eroded
    end
   
    massm=sum(organic_dep_autoch(:,x_m))/1000 + sum(organic_dep_alloch(:,x_m))/1000 + sum(mineral_dep(:,x_m))/1000 + usmass; %[kg] Mass of sediment to be eroded at the current marsh edge above the depth of erosion
    volm=elevation(yr-1,x_m)-elevation(yr-1,1);  %[m3] Volume of sediment to be eroded at the current marsh edge above the depth of erosion
    
    rhom=massm/volm; %bulk density of marsh edge [kg/m3]
    rhomt(yr)=rhom;massmt(yr)=massm; %create vector to track density and mass of eroded material over time (saved at end of simulation as output)
    
    if rhom>rhos
        rhom=rhos; %rhom should never exceed the density of pure sediment
    end
    if rhom<rhoo
        rhom=rhoo; %rhom should never be less than the density of pure OM 
    end
    
    Fm=(Fm_min+Fm_org)/(3600*24*365); %[kg/s] Mass flux of both mineral and organic sediment from the bay to the marsh

    PAR=[rhos P B wsf tcr Co wind Ba Be amp RSLR Fm rhos lamda dist dmo rhob rhom]; % Set up parameters to feed into ODE
    [t,X]=ode23s(@(t,X) funBAY(X,PAR),to,[bfo db],OPT);fetch_ODE=X(:,1);db_ODE=X(:,2); %Solves for change in bay depth and width, solver for still diff equat., low order method, see funbay for details of the calcuation

    %Remove any NaN values from bay fetch and depth results
    db_ODE(isnan(db_ODE))=[];
    fetch_ODE(isnan(fetch_ODE))=[];
    Fc_ODE(isnan(Fc_ODE))=[];
    
    %Update values for this year iteration
    db = db_ODE(end); %Set initial bay depth of the bay to final depth from funBAY
    fetch(yr) = fetch_ODE(end); %Set initial bay width of the bay to final width from funBAY
    bfo = fetch(yr); %Set initial bay width of the bay to final width from funBAY
    C_e(yr) = C_e_ODE(end);%[kg/m^3] Susp. sed. conc. at marsh edge should be defined as an output from  edge erosion model
    
    Fc=Fc_ODE(end)*(3600*24*365); %[kg/yr] Annual net flux of sediment out of/into the bay from outside the system
    Fc_org=Fc*OCb(yr-1); %[kg/yr] Annual net flux of organic sediment out of/into the bay from outside the system
    Fc_min=Fc*(1-OCb(yr-1)); %[kg/yr] Annual net flux of mineral sediment out of/into the bay from outside the system
    
    [Fe_org,Fe_min] = calcFE(bfo,fetch(yr-1)); %Caluclate the flux of organic and mineral sediment to the bay from erosion of the marsh
    Fe_org=Fe_org/1000; %[kg/yr] Annual net flux of organic sediment to the bay due to erosion
    Fe_min=Fe_min/1000; %[kg/yr] Annual net flux of mineral sediment to the bay due to erosion
    
    Fb_org = Fe_org - Fm_org - Fc_org; %[kg/yr] Net flux of organic sediment into (or out of, if negative) the bay
    Fb_min = Fe_min - Fm_min - Fc_min; %[kg/yr] Net flux of mineral sediment into (or out of, if negative) the bay
    
%     if Fb_org+sum(BayOM) < 0 %Condition such that there can never be more organic matter leaveing the bay than is currently in the bay
%         Fb_org = -sum(BayOM); %The flux of organic matter out of the bay is equal to the total amount of organic matter in the bay
%     end  xxx
    
    BayExport(yr,:) = [Fc_org Fc_min]; %[kg/yr] Mass of organic and mineral sediment exported from the bay each year
    BayOM(yr)=Fb_org; %[kg/yr] Mass of organic sediment stored in the bay in each year
    BayMM(yr)=Fb_min; %[kg/yr] Mass of mineral sediment stored in the bay in each year
    
    
    if Fb_org > 0 && Fb_min > 0 %If there is both mineral and organic flux into the bay
        OCb(yr) = Fb_org/(Fb_org+Fb_min)+.05; %xx
    elseif Fb_org > 0 %if there is only organic flux into the bay, organic content of the bay bottom surface =100%
        OCb(yr) = 1;
    elseif Fb_min > 0 %if there is only mineral flux into the bay, organic content of the bay bottom surface = 0%
        OCb(yr) = 0;
    else %If there is no mineral or organic deposition, the bay bottom surface has the same organic content as the previous timestep
        OCb(yr) = OCb(yr-1);
    end
    
    if db < Bay_depth(1) %If bay has eroded down to depth below initial bay bottom, there is only mineral sediment remaining, set to background value of organic matter in the bay sediments
        OCb(yr) = 0.05;
    end
    
    rhob = 1 / ((1-OCb(yr))/rhos + OCb(yr)/rhoo); % [kg/m3] Density of bay sediment
    
    if isreal(bfo) == 0 %if the fetch is not a real number, means that the marsh is completely gone and the simulation ends!
        display('Marsh has eroded completely away')
        endyear = yr;
        break
    end
    
    x_m = ceil(bfo)+1; %new first marsh cell (i.e. marsh edge)
    x_f = find(elevation(yr-1,:)<(msl(yr)+amp-Dmin),1,'last')+1; %new first forest cell (i.e. forest edge)
   
    
    tempelevation = elevation(yr-1,x_m:x_f-1); %for ease off coding, create tempelevation variable to use in calcuations each year (previous year's elevation)
    Dcells = Marsh_edge(yr-1)-x_m; %Calculates change in the number of marsh cells
    
    if Dcells > 0 %Prograde the marsh, with new marsh cells having the same elevation as the previous marsh edge
        tempelevation(1:Dcells) = elevation(yr-1,Marsh_edge(yr-1)); 
        %%Account for mineral and organic material deposited in new marsh
        %%cells xx
    end
    
    msl(yr) = msl(yr-1) + SLR; %calculate current mean sea level (baed on the mean sea level of the previous year plus the yearly SLR rate)
    elevation(yr,1:x_m-1) = msl(yr)+amp-db; %All bay cells have the same depth, set to the new value, taking into account the MSL

    [tempelevation,temporg_autoch,temporg_alloch,tempmin,Fm_min,Fm_org,tempbgb,accretion,tempagb] = evolvemarsh(tempelevation,msl(yr),C_e(yr),OCb(yr)); %allow for deposition in the marsh, see function evolvemarsh for more detail
    
    elevation(yr,x_m:x_f-1) = tempelevation; %[m] update elevation of the given year from the tempelevation that has gone through evolvemarsh  
    elevation(yr,x_f:B) = elevation(yr-1,x_f:B); %Forest elevation remains unchanged
    mineral_dep(yr,x_m:x_f-1) = tempmin; %[g] update mineral sediment deposited in a given year


 % TURN ALLO OFF
   %%temporg_alloch=temporg_alloch.*0; %this is to turn allo off (i.e.
   %%instantly minearlize all OM deposited on the marsh)

 
 % AUTOCTHONOUS WITH DEPTH 
    dddd=elevation(yr,x_m:x_f-1) - elevation(1:yr,x_m:x_f-1); %Calculate depth of each sediment pocket below the surface
    [CC]=biodepth(dddd,tempbgb,x_m,x_f-1); %xx
    organic_dep_autoch=organic_dep_autoch+CC; %add in new OM to previous year's OM
 % NO AUTOCHTONOUS WITH DEPTH
  % organic_dep_autoch(yr,x_m:x_f-1) = temporg_autoch; %[g] belowground
  % plant material deposited in a given year, deposited on the surface
  % layer
    
  
  mortality(yr,x_m:x_f-1) = temporg_autoch; %[g] belowground plant material deposited in a given year, for keeping track of without decomposition
  organic_dep_alloch(yr,x_m:x_f-1) = temporg_alloch; %[g] allochthanous organic material deposited in a given year
    bgb_sum(yr) = sum(tempbgb); %[g] belowground biomass deposition summed across the marsh platform. Saved through time without decomposition for analysis
    
    bgb(yr,x_m:x_f-1)=tempbgb;
    agb(yr,x_m:x_f-1)=tempagb;
    avg_accretion=mean(accretion); %[m/yr] Accretion rate for a given year averaged across the marsh platform
    %     total_dep(yr,x_m:B) = tempaccretion;
    
    %%Update forest 
    x_f = find(elevation(yr-1,:)<(msl(yr)+amp-Dmin),1,'last')+1; %new first forest cell
    forestage=forestage+1;  %increase forest age
    df = -msl(yr) + elevation(yr,x_f:B); %xx
    organic_dep_autoch(yr,x_f:B)=f0+fwet*exp(-fgrow*df); %calculate organic deposition in the forest
    mineral_dep(yr,x_f:B)=forestMIN(1,80);%implement minearl deposition in the forest
    aboveground_forest(yr,x_f:B)=BMax_forest./(1+a*exp(-b*df)); %calculate aboveground biomass in the forest

[compaction,tempFd]=decompose(x_m,x_f-1); %decompose marsh OM, see function decompose for more detail
   
Fd(yr)=tempFd; %[kg] Flux of organic matter out of the marsh due to decomposition (update vector with output from decompose function)
    
elevation(yr,x_m:B) = elevation(yr,x_m:B)-compaction(x_m:B); %Adjust marsh and forest elevation due to compaction from decomposition
OM_sum_au(yr,1:length(elevation))=sum(organic_dep_autoch(1:yr,:));  %calculate all auto. OM from the given year
OM_sum_al(yr,1:length(elevation))=sum(organic_dep_alloch(1:yr,:));  %calculate all allo. OM from the given year
    
    F=0;
    while x_m < B %When the marsh edge is less than the total width of the domain (i.e. the bay-marsh boundary is within the domain)...
        if organic_dep_autoch(yr,x_m) > 0 %If organic deposition is greater than zero, the marsh is still accreting
            break
        else %Otherwise, the marsh has drowned, and will be eroded to form new bay
            F=1; %set marker (F) to 1
            edge_flood(yr) = edge_flood(yr) + 1; %Count that cell as a flooded cell
            bfo = bfo + 1;%Increase the bay fetch by one cell
            x_m = x_m + 1;%Update the new location of the marsh edge.
        end
    end
    
    if F == 1 %If flooding occurred, adjust marsh flux
        [FF_org,FF_min] = calcFE(bfo,fetch(yr-1)); %Calculate the amount of organic and mineral sediment liberated from the flooded cells
        Fm_min = Fm_min - FF_min; %Adjust flux of mineral sediment to the marsh
        Fm_org = Fm_org - FF_org; %Adjust flux of organic sediment to the marsh
        elevation(yr,1:x_m) = elevation(yr,1); %Change the drowned marsh cell to z bay cell 
    end
    
  fluxes(:,yr)=[Fe_min Fe_org Fm_min Fm_org Fc_min Fc_org Fb_min Fb_org]'; %put all fluxes into one matrix for later analysis (saved as model output later)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    
    %Update inputs for marsh edge erosion from calculations earlier in the
    %timestep
    Marsh_edge(yr) = x_m;
    Forest_edge(yr) = x_f;
    Bay_depth(yr) = db;
        
    if x_m > 0 && x_m < B %if the marsh edge is within the domain 
        dmo = msl(yr)+amp-elevation(yr,x_m);%calculate new marsh edge elevation
        Edge_ht(yr) = dmo; %save marsh edge elevation in vector
    elseif x_m <= 0 %Condition for if the marsh has expanded to fill the basin, end the model simulation
        disp('Marsh has expanded to fill the basin.')
        endyear = yr;
        edge_flood(endyear+1:end) = [];
        break
    elseif x_m >= B %Condition for if the marsh has eroded completely away, end the model simulation
        disp('Marsh has retreated. Basin is completely flooded.')
        endyear = yr;
        edge_flood(endyear+1:end) = [];
        break
    end
    
    if db < 0.3 %Condition for if the bay gets very shallow, end model simulation
        disp('Bay has filled in to form marsh.')
        endyear = yr;
        edge_flood(endyear+1:end) = [];
        break
    end
    
    Fc_ODE = [];
    C_e_ODE = [];
    clear tempelevation
    fetch(yr)=bfo; %Save change in bay fetch through time
    Fm_flood = 0;
end

%Sum major fluxes and other output variables for analysis
organic_dep_last30yrs=organic_dep_autoch(endyear-30:endyear,x_m:x_f)+organic_dep_alloch(endyear-30:endyear,x_m:x_f); %[g] Organic matter deposited in the marsh over the past 30 years
mineral_dep_last30yrs=mineral_dep(endyear-30:endyear,x_m:x_f); %[g] Mineral matter deposited in the marsh over the past 30 years
loi_last30yrs=organic_dep_last30yrs./(organic_dep_last30yrs+mineral_dep_last30yrs).*100; %[%] Percent organic matter
OCP_last30yrs=.4.*loi_last30yrs+.0025.*loi_last30yrs.^2; %Organic carbon content (%) from Craft et al (1991)
OC_last30yrs=OCP_last30yrs./100.*(organic_dep_last30yrs+mineral_dep_last30yrs); %[g] Organic Carbon deposited in the marsh over the past 30 years
OC_avg_last30yrs=mean(OC_last30yrs,2); %[g C / m2 / yr] Average Organic Carbon accumulation rate over the last 30 years
save([outputfilename 'OC_avg_last30yrs.mat'],'OC_avg_last30yrs')
save([outputfilename 'loi_last30yrs.mat'],'loi_last30yrs')

marshOM_final=(sum(sum(organic_dep_autoch(:,x_m:x_f)))+sum(sum(organic_dep_alloch(:,x_m:x_f))))/1000; %[kg] Total mass of organic matter in the marsh at the end of the simulation
marshMM_final=sum(sum(mineral_dep(:,x_m:x_f)))/1000; %[kg] Total mass of mineral matter in the marsh at the end of the simulation
marshLOI_final=marshOM_final/(marshOM_final+marshMM_final).*100; %[%] Average loi of the marsh across the marsh platform at the end of the simulation
marshOCP_final=.4.*marshLOI_final+.0025.*marshLOI_final.^2; %Organic carbon content (%) from Craft et al (1991)
marshOC_final=marshOCP_final./100.*(marshOM_final+marshMM_final); %[kg] Mass of organic carbon stored in the marsh at the end of the simulation
save([outputfilename 'marshLOI_final.mat'],'marshLOI_final')
save([outputfilename 'marshOM_final.mat'],'marshOM_final')
save([outputfilename 'marshOC_final.mat'],'marshOC_final')

dOC=marshOC_final-marshOC_initial; %[kg] Change in Organic carbon in the marsh over the course of the experiment
save([outputfilename 'dOC.mat'],'dOC')
save([outputfilename 'mortality.mat'],'mortality')
save([outputfilename 'OM_sum_al.mat'],'OM_sum_al')
save([outputfilename 'OM_sum_au.mat'],'OM_sum_au')

forestOM_final=(sum(sum(organic_dep_autoch(:,x_f:B)))+sum(sum(organic_dep_alloch(:,x_f:B))))/1000; %[kg] Total mass of organic matter in the forest at the end of the simulation
forestMM_final=sum(sum(mineral_dep(:,x_f:B)))/1000; %[kg] Total mass of mineral matter in the forest at the end of the simulation
forestLOI_final=forestOM_final./(forestOM_final+forestMM_final).*100; %[%] Average loi of the forest the end of the simulation
forestOCP_final=.4.*forestLOI_final+.0025.*forestLOI_final.^2; %Organic carbon content (%) from Craft et al (1991)
forestOC_final=forestOCP_final./100.*(forestMM_final+forestOM_final);
save([outputfilename 'forestLOI_final.mat'],'forestLOI_final')
save([outputfilename 'forestOM_final.mat'],'forestOM_final')
save([outputfilename 'forestOC_final.mat'],'forestOC_final')

bayexportOM_final=sum(BayExport(:,1)); %[kg] Total mass of organic matter exported from the bay to outside the system over the course of the simulation
bayexportMM_final=sum(BayExport(:,2)); %[kg] Total mass of mineral matter exported from the bay to outside the system over the course of the simulation
bayexportLOI_final=bayexportOM_final./(bayexportOM_final+bayexportMM_final).*100; %[%] Average loi of the material exported from the bay over the course of the simulation
bayexportOCP_final=.4.*bayexportLOI_final+.0025.*bayexportLOI_final.^2; %Organic carbon content (%) from Craft et al (1991)
bayexportOC_final=bayexportOCP_final./100.*(bayexportOM_final+bayexportMM_final);
save([outputfilename 'bayexportOM_final.mat'],'bayexportOM_final')
save([outputfilename 'bayexportOC_final.mat'],'bayexportOC_final')
save([outputfilename 'bayexportLOI_final.mat'],'bayexportLOI_final')

bayOM_final=sum(BayOM); %[kg] Total mass of organic matter stored in the bay at the end of the simulation
bayMM_final=sum(BayMM); %[kg] Total mass of mineral matter stored in the bay at the end of the simulation
bayLOI_final=bayOM_final./(bayOM_final+bayMM_final).*100; %[%] Average loi of the material exported from the bay over the course of the simulation
bayOCP_final=.4.*bayLOI_final+.0025.*bayLOI_final.^2; %Organic carbon content (%) from Craft et al (1991)
bayOC_final=bayOCP_final./100.*(bayOM_final+bayMM_final);
save([outputfilename 'bayOM_final.mat'],'bayOM_final')
save([outputfilename 'bayOC_final.mat'],'bayOC_final')
save([outputfilename 'bayLOI_final.mat'],'bayLOI_final')

bgb_final=sum(bgb_sum)/1000; %[kg] Total mass of belowground biomass that has been deposited in the marsh over the course of the simulation
save([outputfilename 'bgb_final.mat'],'bgb_final')

decomp_final = sum(Fd); %[kg] Total mass of organic matter decomposed in the marsh over the course of the simulation
save([outputfilename 'decomp_final.mat'],'decomp_final')

accretion_final = (mean(elevation(endyear,x_m:x_f))-mean(elevation(26,5000:6000)))/(endyear-startyear);%mean(avg_accretion); %[m/yr] Average accretion rate across the whole marsh over the course of the simulation
save([outputfilename 'accretion_final.mat'],'accretion_final')

accretion_last30yrs = (mean(elevation(endyear,x_m:x_f))-mean(elevation(26,Marsh_edge(endyear-30):Forest_edge(endyear-30))))/30;%mean(avg_accretion); %[m/yr] Average accretion rate across the whole marsh over the last 30 years of the simulation
save([outputfilename 'accretion_last30yrs.mat'],'accretion_last30yrs')


% outputfilename = [filename 'Initial Surface'];
% print('-dpng',outputfilename)
% saveas(fh1,[outputfilename '.fig'])
elev=elevation;
save([outputfilename 'OCb.mat'],'OCb')
save([outputfilename 'elev.mat'],'elev')
save([outputfilename 'mineral deposition.mat'],'mineral_dep')
save([outputfilename 'organic deposition.mat'],'organic_dep_autoch','organic_dep_alloch')
save([outputfilename 'marsh edge.mat'],'Marsh_edge')
save([outputfilename 'forest edge.mat'],'Forest_edge')
save([outputfilename 'bay depth.mat'],'Bay_depth')
save([outputfilename 'marsh edge flooding.mat'],'edge_flood')
save([outputfilename 'suspended sediment.mat'],'C_e')
save([outputfilename 'fetch.mat'],'fetch')
save([outputfilename 'compaction.mat'],'compaction')
save([outputfilename 'bgb.mat'],'bgb')
save([outputfilename 'agb.mat'],'agb')
save([outputfilename 'rhomt.mat'],'rhomt')
save([outputfilename 'Fe_org.mat'],'Fe_org')
save([outputfilename 'fluxes.mat'],'fluxes')
save([outputfilename 'aboveground_forest.mat'],'aboveground_forest')

clear all